<?php
/**
 * Gateway class.
 *
 * @package TheBunchKEPesaPal
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

if ( class_exists( 'WC_Payment_Gateway' ) ) {
	if ( ! class_exists( 'WC_TheBunchKE_PesaPal_Pay_Gateway' ) ) {

		/**
		 * Main gateway class.
		 */
		class WC_TheBunchKE_PesaPal_Pay_Gateway extends WC_Payment_Gateway {

			/**
			 * If logging is enabled.
			 *
			 * @var bool
			 */
			public static bool $log_enabled = false;

			/**
			 * Logger instance.
			 *
			 * @var bool|WC_Logger
			 */
			public static $log = false;

			/**
			 * Main constructor.
			 */
			public function __construct() {

				// Settings.
				$this->id           = 'pesapal';
				$this->method_title = 'Pesapal';
				$this->has_fields   = false;
				$this->testmode     = ( $this->get_option( 'testmode' ) === 'yes' ) ? true : false;
				$this->debug        = 'yes' === $this->get_option( 'debug', 'no' );
				$this->title        = $this->get_option( 'title' );
				$this->description  = $this->get_option( 'description' );
				$this->use_cron     = ( $this->get_option( 'use_cron' ) === 'yes' );
				$default_prefix     = substr( str_shuffle( str_repeat( 'ABCDEFGHJKMNPQRSTUVWXYZ', 4 ) ), 0, 4 );
				$order_prefix       = $this->get_option( 'order_prefix', $default_prefix );

				$this->order_prefix = strtoupper( str_replace( '-', '', str_replace( ' ', '', $order_prefix ) ) );
				self::$log_enabled  = $this->debug;


				// Set up API details.
				if ( $this->testmode ) {
					$api                   = 'https://demo.pesapal.com/';
					$this->consumer_key    = $this->get_option( 'testconsumerkey' );
					$this->consumer_secret = $this->get_option( 'testsecretkey' );
				} else {
					$api                   = 'https://www.pesapal.com/';
					$this->consumer_key    = $this->get_option( 'consumerkey' );
					$this->consumer_secret = $this->get_option( 'secretkey' );
				}

				// OAuth Signatures.
				$this->consumer         = new PesaPalOAuthConsumer( $this->consumer_key, $this->consumer_secret );
				$this->signature_method = new PesaPalOAuthSignatureMethod_HMAC_SHA1();
				$this->token            = null;
				$this->params           = null;

				// PesaPal End Points.
				$this->gateway_url                          = $api . 'api/PostPesapalDirectOrderV4';
				$this->query_payment_status                 = $api . 'API/QueryPaymentStatus';
				$this->query_payment_status_by_merchant_ref = $api . 'API/QueryPaymentStatusByMerchantRef';
				$this->query_payment_details                = $api . 'API/querypaymentdetails';

				// IPN URL.
				$this->notify_url   = add_query_arg( 'wc-api', strtolower( get_class( $this ) ), home_url( '/' ) );
				$this->rest_ipn_url = rest_url( 'thebunchke-pespal/v1/ipn-listener' );

				$this->init_form_fields();
				$this->init_settings();

				if ( is_admin() ) {
					add_action( 'woocommerce_update_options_payment_gateways_' . $this->id, array( $this, 'process_admin_options' ) );
				}

				add_action( 'woocommerce_receipt_' . $this->id, array( $this, 'payment_page' ) );

				add_action( 'woocommerce_api_callback', array( $this, 'ipn_response' ) );

				add_action( 'woocommerce_api_wc_gateway_' . $this->id, array( $this, 'ipn_response' ) );

				add_action( 'thebunchke_pesapal_woo_bckground_cron', array( $this, 'check_order_status' ) );

			}

			/**
			 * Logging method.
			 *
			 * @param string|array|object $message Log message.
			 * @param string              $level Optional. Default 'info'. Possible values:
			 *                      emergency|alert|critical|error|warning|notice|info|debug.
			 */
			public static function log( $message, $level = 'info' ) {
				if ( self::$log_enabled ) {
					if ( empty( self::$log ) ) {
						self::$log = wc_get_logger();
					}
					if ( ! is_string( $message ) ) {
						$message = print_r( $message, true );
					}
					self::$log->log( $level, $message, array( 'source' => 'pesapal' ) );
				}
			}

			/**
			 * Set up form fields.
			 *
			 * @return void
			 */
			public function init_form_fields() {
				$this->form_fields = array(
					'enabled'         => array(
						'title'   => __( 'Enable/Disable', 'woothemes' ),
						'type'    => 'checkbox',
						'label'   => __( 'Enable Pesapal Payment', 'woothemes' ),
						'default' => 'no',
					),
					'title'           => array(
						'title'       => __( 'Title', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'This controls the title which the user sees during checkout.', 'woothemes' ),
						'default'     => __( 'Pesapal Payment', 'woothemes' ),
					),
					'order_prefix'    => array(
						'title'       => __( 'Order Prefix', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'This is the prefix appended to all order to ensure you do not have duplicate pesapal merchant references generated by other systems connected to your Pesapal account.', 'woothemes' ),
						'default'     => $this->order_prefix,
					),
					'description'     => array(
						'title'       => __( 'Description', 'woocommerce' ),
						'type'        => 'textarea',
						'description' => __( 'This is the description which the user sees during checkout.', 'woocommerce' ),
						'default'     => __( 'Payment via Pesapal Gateway, you can pay by either credit/debit card or use mobile payment option such as Mpesa.', 'woocommerce' ),
					),
					'testmode'        => array(
						'title'       => __( 'Use Demo Gateway', 'woothemes' ),
						'type'        => 'checkbox',
						'label'       => __( 'Use Demo Gateway', 'woothemes' ),
						'description' => __( 'Use demo pesapal gateway for testing from your account at <a href="https://demo.pesapal.com">https://demo.pesapal.com</a>', 'woothemes' ),
						'default'     => 'no',
					),
					'consumerkey'     => array(
						'title'       => __( 'Pesapal Consumer Key', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'Your Pesapal consumer key which should have been emailed to you.', 'woothemes' ),
						'default'     => '',
					),
					'secretkey'       => array(
						'title'       => __( 'Pesapal Secret Key', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'Your Pesapal secret key which should have been emailed to you.', 'woothemes' ),
						'default'     => '',
					),

					'testconsumerkey' => array(
						'title'       => __( 'Pesapal Demo Consumer Key', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'Your demo Pesapal consumer key which can be seen at demo.pesapal.com.', 'woothemes' ),
						'default'     => '',
					),

					'testsecretkey'   => array(
						'title'       => __( 'Pesapal Demo Secret Key', 'woothemes' ),
						'type'        => 'text',
						'description' => __( 'Your demo Pesapal secret key which can be seen at demo.pesapal.com.', 'woothemes' ),
						'default'     => '',
					),

					'debug'           => array(
						'title'       => __( 'Debug Log', 'woocommerce' ),
						'type'        => 'checkbox',
						'label'       => __( 'Enable logging', 'woocommerce' ),
						'default'     => 'no',
						'description' => sprintf( __( 'Log PesaPal events, such as IPN requests, inside <code>woocommerce/logs/pesapal-%s.txt</code>', 'woocommerce' ), sanitize_file_name( wp_hash( 'pesapal' ) ) ),
					),

					'use_cron'        => array(
						'title'       => __( 'Use Background Cron', 'woocommerce' ),
						'type'        => 'checkbox',
						'label'       => __( 'Use Background Cron', 'woocommerce' ),
						'default'     => 'no',
						'description' => __( 'In case IPN has issues, you can add a cron job on your server that will be a back-up process to ensure transactions get completed. Enable this to set the cron to run every 5 mins. However, its advisable to ensure IPN is up and running', 'woocommerce' ),
					),
				);
			}

			/**
			 * Admin options.
			 *
			 * @return void
			 */
			public function admin_options() {
				?>
				<h3><?php esc_html_e( 'Pesapal', 'woothemes' ); ?></h3>
				<p>
					<?php esc_html_e( 'PesaPal requires Full names and email/phone number. To handle IPN return requests, please set the url ' ); ?>
					<strong><?php echo esc_url( $this->notify_url ); ?></strong><br/> <?php esc_html_e( 'or' ); ?>
					<strong><?php echo esc_url( $this->rest_ipn_url ); ?></strong>
					<?php esc_html_e( ' in your <a href="https://www.pesapal.com/merchantdashboard" target="_blank">PesaPal</a> account settings' ); ?>
				</p>
				<table class="form-table">
					<?php $this->generate_settings_html(); ?>
				</table>
				<script type="text/javascript">
				jQuery(function(){
					var testMode = jQuery("#woocommerce_pesapal_testmode");
					var live_consumer = jQuery("#woocommerce_pesapal_consumerkey");
					var live_secrect = jQuery("#woocommerce_pesapal_secretkey");
					var test_consumer = jQuery("#woocommerce_pesapal_testconsumerkey");
					var test_secrect = jQuery("#woocommerce_pesapal_testsecretkey");
					if (testMode.is(":not(:checked)")){
						test_consumer.parents("tr").hide();
						test_secrect.parents("tr").hide();
						live_consumer.parents("tr").show();
						live_secrect.parents("tr").show();
					}
					testMode.click(function(){            
						// If checked
						if (testMode.is(":checked")) {
							//show the hidden div
							test_consumer.parents("tr").show("fast");
							test_secrect.parents("tr").show("fast");
							live_consumer.parents("tr").hide("fast");
							live_secrect.parents("tr").hide("fast");
						} else {
							//otherwise, hide it
							test_consumer.parents("tr").hide("fast");
							test_secrect.parents("tr").hide("fast");
							live_consumer.parents("tr").show("fast");
							live_secrect.parents("tr").show("fast");
						}
					});
				});
				</script>
				<?php
			}

			/**
			 * Process payment.
			 *
			 * @param int $order_id The order id.
			 *
			 * @return array
			 */
			public function process_payment( $order_id ) {
				global $woocommerce;

				$order = wc_get_order( $order_id );

				if ( in_array( $order->get_status(), array( 'processing', 'completed' ) ) ) {
					// Redirect to payment page
					return array(
						'result'   => 'success',
						'redirect' => $this->get_return_url( $order ),
					);
				} else {
					return array(
						'result'   => 'success',
						'redirect' => $order->get_checkout_payment_url( true ),
					);
				}
			}


			/**
			 * Create the payment page.
			 *
			 * @param int $order_id The order id.
			 *
			 * @return array
			 */
			public function payment_page( $order_id ) {
				if ( isset( $_REQUEST['pesapal_merchant_reference'] ) && isset( $_REQUEST['pesapal_transaction_tracking_id'] ) ) {
					$order                           = wc_get_order( $order_id );
					$pesapal_merchant_reference      = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_merchant_reference'] ) );
					$pesapal_transaction_tracking_id = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_transaction_tracking_id'] ) );

					$transaction_details = $this->getTransactionDetails( $pesapal_merchant_reference, $pesapal_transaction_tracking_id );

					add_post_meta( $order_id, '_order_pesapal_transaction_tracking_id', $transaction_details['pesapal_transaction_tracking_id'] );
					add_post_meta( $order_id, '_order_thebunchke_pesapalment_method', $transaction_details['payment_method'] );

					add_post_meta( $order_id, '_order_payment_method', $transaction_details['payment_method'] );

					if ( 'COMPLETED' === $transaction_details['status'] ) {
						$order->payment_complete();
					} else {
						$order->update_status( 'wc-processing', 'Payment accepted, awaiting confirmation' );
					}
					return array(
						'result'   => 'success',
						'redirect' => $this->get_return_url( $order ),
					);

				} else {
					$url = $this->create_url( $order_id );
					?>
					<div class="pesapal_container" style="position:relative;">
						<img class="pesapal_loading_preloader" src="<?php echo esc_url( THEBUNCHKE_PESAPAL_WOO_PLUGIN_URL ); ?>/assets/img/loader.gif" alt="loading" style="position:absolute;"/>
						<iframe class="pesapal_loading_frame" src="<?php echo esc_url( $url ); ?>" width="100%" height="700px"  scrolling="yes" frameBorder="0">
							<p><?php esc_html_e( 'Browser unable to load iFrame', 'woothemes' ); ?></p>
						</iframe>
					</div>
					<script>
						jQuery(function(){
							jQuery('.pesapal_loading_frame').on('load', function () {
								jQuery('.pesapal_loading_preloader').hide();
							});
						});
					</script>
					<?php
				}
			}

			/**
			 * Generate the thank you page.
			 *
			 * @param int $order_id The order id.
			 *
			 * @return void
			 */
			public function thankyou_page( $order_id ) {

				if ( isset( $_REQUEST['pesapal_merchant_reference'] ) && isset( $_REQUEST['pesapal_transaction_tracking_id'] ) ) {
					$order                           = wc_get_order( $order_id );
					$pesapal_merchant_reference      = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_merchant_reference'] ) );
					$pesapal_transaction_tracking_id = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_transaction_tracking_id'] ) );

					$transaction_details = $this->getTransactionDetails( $pesapal_merchant_reference, $pesapal_transaction_tracking_id );

					$order->add_order_note( __( 'Payment accepted, awaiting confirmation.', 'woothemes' ) );
					add_post_meta( $order_id, '_order_pesapal_transaction_tracking_id', $transaction_details['pesapal_transaction_tracking_id'] );
					add_post_meta( $order_id, '_order_thebunchke_pesapalment_method', $transaction_details['payment_method'] );

					add_post_meta( $order_id, '_order_payment_method', $transaction_details['payment_method'] );

					if ( 'COMPLETED' === $transaction_details['status'] ) {
						$order->payment_complete();
					} else {
						$order->update_status( 'wc-processing', 'Payment accepted, awaiting confirmation' );
					}
				}
				WC()->cart->empty_cart();
			}


			/**
			 * Create iframe URL.
			 *
			 * @param int $order_id The order id.
			 *
			 * @return string.
			 */
			public function create_url( $order_id ) {
				$order        = wc_get_order( $order_id );
				$order_xml    = $this->pesapal_xml( $order, $order_id );
				$callback_url = $this->get_return_url( $order ); // add_query_arg('key', $order->order_key, add_query_arg('order', $order_id, $this->get_return_url( $order )));
				// $callback_url = add_query_arg('key', $order->order_key, add_query_arg('order', $order_id, $order->get_checkout_order_received_url()));

				$url = PesaPalOAuthRequest::from_consumer_and_token( $this->consumer, $this->token, 'GET', $this->gateway_url, $this->params );
				$url->set_parameter( 'oauth_callback', $callback_url );
				$url->set_parameter( 'pesapal_request_data', $order_xml );
				$url->sign_request( $this->signature_method, $this->consumer, $this->token );
				return $url;
			}

			/**
			 * Generate PesaPal XML.
			 *
			 * @param WC_Order $order The current order.
			 * @param int      $order_id The order id.
			 *
			 * @return string
			 */
			public function pesapal_xml( $order, $order_id ) {
				$pesapal_args['total']      = $order->get_total();
				$pesapal_args['reference']  = $this->order_prefix . '-' . $order_id;
				$pesapal_args['first_name'] = $order->get_billing_first_name();
				$pesapal_args['last_name']  = $order->get_billing_last_name();
				$pesapal_args['email']      = $order->get_billing_email();
				$pesapal_args['phone']      = preg_replace( '/[^0-9]/', '', str_replace( ' ', '', $order->get_billing_phone() ) );

				$description = sprintf( __( 'Order at %1$s, from %2$s' ), bloginfo( 'name' ), $order->billing_first_name . ' ' . $order->billing_email . ' ' . $order->billing_phone );
				$lineitem    = '';
				foreach ( $order->get_items() as $item_key => $item_values ) {
					$item_name     = $item_values->get_name();
					$item_name     = trim( preg_replace( '/ +/', ' ', preg_replace( '/[^A-Za-z0-9 ]/', ' ', urldecode( html_entity_decode( strip_tags( $item_name ) ) ) ) ) );
					$item_name     = str_replace( array( '(', ')' ), '', htmlentities( substr( $item_name, 0, 99 ) ) );
					$item_quantity = $item_values->get_quantity();
					$item_total    = $item_values->get_total();
					$item_price    = $item_total / $item_quantity;
					$lineitem     .= "<lineitem uniqueid='" . ( $item_key + 1 ) . "' particulars='" . $item_name . "' quantity='" . $item_quantity . "' unitcost='" . $item_price . "' subtotal='" . $item_total . "'></lineitem>";
				}

				$xml = '<?xml version="1.0" encoding="utf-8"?>
					<PesapalDirectOrderInfo 
						xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
						xmlns:xsd="http://www.w3.org/2001/XMLSchema"
						Amount="' . $pesapal_args['total'] . '"
						Description="Order from ' . $description . '."
						Type="MERCHANT"
						Reference="' . $pesapal_args['reference'] . '"
						FirstName="' . $pesapal_args['first_name'] . '"
						LastName="' . $pesapal_args['last_name'] . '"
						Email="' . $pesapal_args['email'] . '"
						PhoneNumber="' . $pesapal_args['phone'] . '"
						Currency="' . get_woocommerce_currency() . '"
						xmlns="http://www.pesapal.com">
						<lineitems>' . $lineitem . '</lineitems>
					</PesapalDirectOrderInfo>';

				return htmlentities( $xml );
			}

			/**
			 * Process the status request.
			 *
			 * @param string $transaction_id The transaction id.
			 * @param string $merchant_ref Te merchant ref.
			 *
			 * @return string
			 */
			public function status_request( $transaction_id, $merchant_ref ) {
				$request_status = PesaPalOAuthRequest::from_consumer_and_token( $this->consumer, $this->token, 'GET', $this->gateway_url, $this->params );
				$request_status->set_parameter( 'pesapal_merchant_reference', $merchant_ref );
				$request_status->set_parameter( 'pesapal_transaction_tracking_id', $transaction_id );
				$request_status->sign_request( $this->signature_method, $this->consumer, $this->token );

				return $this->checkTransactionStatus( $merchant_ref );
			}


			/**
			 * Check Transaction status
			 *
			 * @return PENDING/FAILED/INVALID
			 **/
			public function checkTransactionStatus( $pesapal_merchant_reference, $pesapal_transaction_tracking_id = null ) {
				if ( $pesapal_transaction_tracking_id ) {
					$query_url = $this->query_payment_status;
				} else {
					$query_url = $this->query_payment_status_by_merchant_ref;
				}

				// get transaction status
				$request_status = PesaPalOAuthRequest::from_consumer_and_token(
					$this->consumer,
					$this->token,
					'GET',
					$query_url,
					$this->params
				);

				$request_status->set_parameter( 'pesapal_merchant_reference', $pesapal_merchant_reference );

				if ( $pesapal_transaction_tracking_id ) {
					$request_status->set_parameter( 'pesapal_transaction_tracking_id', $pesapal_transaction_tracking_id );
				}

				$request_status->sign_request( $this->signature_method, $this->consumer, $this->token );

				return $this->curlRequest( $request_status );
			}

			/**
			 * Check Transaction status
			 *
			 * @return PENDING/FAILED/INVALID
			 **/
			public function getTransactionDetails( $pesapal_merchant_reference, $pesapal_transaction_tracking_id ) {

				$request_status = PesaPalOAuthRequest::from_consumer_and_token(
					$this->consumer,
					$this->token,
					'GET',
					$this->query_payment_details,
					$this->params
				);

				$request_status->set_parameter( 'pesapal_merchant_reference', $pesapal_merchant_reference );
				$request_status->set_parameter( 'pesapal_transaction_tracking_id', $pesapal_transaction_tracking_id );
				$request_status->sign_request( $this->signature_method, $this->consumer, $this->token );

				$response_data = $this->curlRequest( $request_status );

				$pesapal_response       = explode( ',', $response_data );
				return array(
					'pesapal_transaction_tracking_id' => $pesapal_response[0],
					'payment_method'                  => $pesapal_response[1],
					'status'                          => $pesapal_response[2],
					'pesapal_merchant_reference'      => $pesapal_response[3],
				);
			}

			/**
			 * Check Transaction status.
			 *
			 * @return ARRAY
			 **/
			public function curlRequest( $request_status ) {

				$response = wp_remote_get( $request_status );
				if ( is_wp_error( $response ) ) {
					return __( 'An Error Occurred' );
				} else {
					$resp_body = wp_remote_retrieve_body( $response );
					return $resp_body;
				}

			}

			/**
			 * IPN Response
			 *
			 * @return null
			 **/
			public function ipn_response() {

				self::log( 'IPN Begin' );

				self::log( $_REQUEST );

				$pesapal_transaction_tracking_id = '';
				$pesapal_notification            = '';
				$pesapal_merchant_reference      = '';

				if ( isset( $_REQUEST['pesapal_merchant_reference'] ) ) {
					$pesapal_merchant_reference = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_merchant_reference'] ) );
				}

				if ( isset( $_REQUEST['pesapal_transaction_tracking_id'] ) ) {
					$pesapal_transaction_tracking_id = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_transaction_tracking_id'] ) );
				}

				if ( isset( $_REQUEST['pesapal_notification_type'] ) ) {
					$pesapal_notification = sanitize_text_field( wp_unslash( $_REQUEST['pesapal_notification_type'] ) );
				}

				$transaction_details = $this->getTransactionDetails( $pesapal_merchant_reference, $pesapal_transaction_tracking_id );

				self::log( 'IPN Response' );

				self::log( $transaction_details );
				// Get original order id.
				$order_id = str_replace( strtoupper( $this->order_prefix ) . '-', '', $pesapal_merchant_reference );
				$order    = wc_get_order( $order_id );
				if ( $order ) {
					// We are here so lets check status and do actions.
					switch ( $transaction_details['status'] ) {
						case 'COMPLETED':
						case 'PENDING':
							// Check order not already completed.
							if ( in_array( $order->get_status(), array( 'processing', 'completed' ) ) ) {
								if ( 'yes' == $this->debug ) {
									$this->log->add( 'pesapal', 'Aborting, Order #' . $order->id . ' is already complete.' );
								}
								exit;
							}

							if ( 'COMPLETED' === $transaction_details['status'] ) {
								$order->add_order_note( __( 'IPN payment completed', 'woocommerce' ) );
								$order->payment_complete();
							} else {
								$order->update_status( 'on-hold', sprintf( __( 'Payment pending: %s', 'woocommerce' ), 'Waiting PesaPal confirmation' ) );
							}

							if ( 'yes' == $this->debug ) {
								$this->log->add( 'pesapal', 'Payment complete.' );
							}

							break;
						case 'INVALID':
						case 'FAILED':
							// Order failed.
							$order->update_status( 'failed', sprintf( __( 'Payment %s via IPN.', 'woocommerce' ), strtolower( $transactionDetails['status'] ) ) );
							break;

						default:
							// No action.
							break;
					}
				}

				if ( 'CHANGE' === $pesapal_notification && 'PENDING' !== $transaction_details['status'] ) {
					$resp = "pesapal_notification_type=$pesapal_notification" .
							"&pesapal_transaction_tracking_id=$pesapal_transaction_tracking_id" .
							"&pesapal_merchant_reference=$pesapal_merchant_reference";

					ob_start();
					echo $resp;
					ob_flush();

				}
				exit();
			}

			/**
			 * Cron to run and check order status
			 *
			 * @since 1.0.0
			 */
			public function check_order_status() {
				if ( $this->use_cron ) {
					self::log( 'Beginning cron' );
					$fetch = array( 'pending', 'on-hold', 'processing' );
					$args  = array(
						'status'       => $fetch,
						'date_created' => '>' . ( time() - DAY_IN_SECONDS ),
						'return'       => 'ids',
					);

					$orders = wc_get_orders( $args );
					foreach ( $orders as $order ) {
						if ( is_int( $order ) ) {
							$order = wc_get_order( $order );
						}
						$method = $order->get_payment_method();
						if ( $method == $this->id ) {
							$pesapal_merchant_reference = $this->order_prefix . '-' . $order->get_id();
							$status                     = $this->checkTransactionStatus( $pesapal_merchant_reference );
							if ( $status == 'COMPLETED' ) {
								$order->add_order_note( __( 'Payment completed via CRON', 'woocommerce' ) );
								$order->payment_complete();
							} elseif ( in_array( $status, array( 'FAILED', 'REVERSED' ) ) ) {
								$order->update_status( 'failed', sprintf( __( 'Payment %s via CRON.', 'woocommerce' ), strtolower( $status ) ) );
							}
						}
					}
					self::log( 'Completed cron' );
				}
			}
		}
	}
}
